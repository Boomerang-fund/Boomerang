<!-- i18n -->

<% layout('layouts/boilerplate') %>
    <div class="row">
        <h1 class="text-center">
            <%= __('createProject.heading') %>
        </h1>
        <div class="col-6 offset-3">
            <!-- Multi-step form container -->
            <form id="new-project-form" method="POST" action="/projects" enctype="multipart/form-data" novalidate>
                <!-- Include the hidden draftId field if resuming a draft -->
                <input type="hidden" name="draftId" id="draftId" value="<%= draft ? draft._id : '' %>">
                <% if (draft) { %>
                    
                    <% } %>

                        <!-- Step 1: Basics -->
                        <div id="step-1" class="form-step">
                            <h2>
                                <%= __('createProject.step1.heading') %>
                            </h2>
                            <div class="mb-3">
                                <label class="form-label" for="originalTitle">
                                    <%= __('createProject.step1.titleLabel') %>
                                </label>
                                <input class="form-control" type="text" id="originalTitle" name="project[originalTitle]"
                                    value="<%= draft ? draft.originalTitle : '' %>" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">
                                    <%= __('createProject.step1.locationLabel') %>
                                </label>
                                <div id="geocoder-container"></div>
                            </div>
                            <input type="hidden" id="location" name="project[location]" required>
                            <input type="hidden" id="geometry" name="project[geometry]" required>
                            <button type="button" class="btn btn-primary" onclick="nextStep(2)">
                                <%= __('createProject.nextButton') %>
                            </button>
                            <button type="button" class="btn btn-secondary" onclick="saveDraft()">
                                <%= __('createProject.saveDraftButton') %>
                            </button>
                        </div>

                        <!-- Step 2: Details -->
                        <div id="step-2" class="form-step" style="display: none">
                            <h2>
                                <%= __('createProject.step2.heading') %>
                            </h2>
                            <div class="mb-3">
                                <label class="form-label" for="image">
                                    <%= __('createProject.step2.addImagesLabel') %>
                                </label>
                                <input type="file" name="image" id="image" multiple />
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="originalDescription">
                                    <%= __('createProject.step2.descriptionLabel') %>
                                </label>
                                <textarea class="form-control" id="originalDescription" name="project[originalDescription]"
                                    required><%= draft ? draft.originalDescription : '' %></textarea>
                            </div>

                            <% if (draft && draft.images && draft.images.length> 0) { %>
                                <div class="mb-3">
                                    <label class="form-label">
                                        <%= __('createProject.step2.savedImagesLabel') %>
                                    </label>
                                    <div class="d-flex flex-wrap">
                                        <% draft.images.forEach((image, index)=> { %>
                                            <div class="m-2 text-center">
                                                <img src="<%= image.url %>"
                                                    alt="<%= __('createProject.step2.imageAlt') %>"
                                                    class="img-thumbnail" style="width: 150px;" />
                                                <div class="form-check">
                                                    <input type="checkbox" class="form-check-input"
                                                        id="delete-image-<%= index %>" name="deleteImages[]"
                                                        value="<%= image.filename %>" />
                                                    <label class="form-check-label" for="delete-image-<%= index %>">
                                                        <%= __('createProject.step2.deleteImageLabel') %>
                                                    </label>
                                                </div>
                                            </div>
                                            <% }); %>
                                    </div>
                                </div>
                                <% } %>

                                    <button type="button" class="btn btn-secondary" onclick="previousStep(1)">
                                        <%= __('createProject.previousButton') %>
                                    </button>
                                    <button type="button" class="btn btn-primary" onclick="nextStep(3)">
                                        <%= __('createProject.nextButton') %>
                                    </button>
                                    <button type="button" class="btn btn-secondary" onclick="saveDraft()">
                                        <%= __('createProject.saveDraftButton') %>
                                    </button>
                        </div>

                        <!-- Step 3: Funding -->
                        <div id="step-3" class="form-step" style="display: none">
                            <h2>
                                <%= __('createProject.step3.heading') %>
                            </h2>
                            <div class="mb-3">
                                <label class="form-label" for="fundingGoal">
                                    <%= __('createProject.step3.fundingGoalLabel') %>
                                </label>
                                <div class="input-group">
                                    <select class="form-select" id="currency" name="project[currency]" required>
                                        <option value="THB" <%=draft && draft.currency==='THB' ? 'selected' : '' %>>THB
                                            - à¸¿</option>
                                        <option value="USD" <%=draft && draft.currency==='USD' ? 'selected' : '' %>>USD
                                            - $</option>
                                    </select>
                                    <input class="form-control" type="number" id="fundingGoal"
                                        name="project[fundingGoal]" placeholder="<%= 0 %>"
                                        value="<%= draft ? draft.fundingGoal : '' %>" required />
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="deadline">
                                    <%= __('createProject.step3.deadlineLabel') %>
                                </label>
                                <input class="form-control" type="date" id="deadline" name="project[deadline]"
                                    value="<%= draft && draft.deadline ? draft.deadline.toISOString().split('T')[0] : '' %>"
                                    required />
                            </div>
                            <button type="button" class="btn btn-secondary" onclick="previousStep(2)">
                                <%= __('createProject.previousButton') %>
                            </button>
                            <button type="button" class="btn btn-primary" onclick="nextStep(4)">
                                <%= __('createProject.nextButton') %>
                            </button>
                            <button type="button" class="btn btn-secondary" onclick="saveDraft()">
                                <%= __('createProject.saveDraftButton') %>
                            </button>
                        </div>
                        <div id="step-4" class="form-step" style="display: none;">
                            <h2><%= __('createProject.step4.heading') %></h2>
                            <div id="categories-container"></div>
                            <p>Selected Keywords: <span id="selected-count">0</span>/15</p>
                            <button type="button" class="btn btn-secondary" onclick="previousStep(3)">
                                <%= __('createProject.previousButton') %>
                            </button>
                            <button type="submit" class="btn btn-success">
                                <%= __('createProject.submitButton') %>
                            </button>
                            <button type="button" class="btn btn-secondary" onclick="saveDraft()">
                                <%= __('createProject.saveDraftButton') %>
                            </button>
                        </div>
                        
            </form>
            <a href="/projects">
                <%= __('createProject.allProjectsLink') %>
            </a>
        </div>
    
    <script type="module">
        const categories = <%- categories %>; // Ensure categories is defined correctly as JSON.
    
        let currentStep = 1; // Keeps track of the current step in the form
        const selectedKeywords = new Set(); // Tracks selected keywords
        const maxKeywords = 15; // Max number of keywords allowed
    
        function nextStep(step) {
            document.getElementById(`step-${currentStep}`).style.display = "none";
            document.getElementById(`step-${step}`).style.display = "block";
            currentStep = step;
        }
    
        function previousStep(step) {
            document.getElementById(`step-${currentStep}`).style.display = "none";
            document.getElementById(`step-${step}`).style.display = "block";
            currentStep = step;
        }
        function updateFlashMessage(message, type) {
            const flashContainer = document.getElementById("flash-messages");

            if (!flashContainer) {
                console.error("â Flash message container not found!");
                return;
            }

            // Determine Bootstrap class based on message type
            const alertClass = type === "success" ? "alert-success" : "alert-danger";

            // Create a new alert message (without close button)
            const alertDiv = document.createElement("div");
            alertDiv.className = `alert ${alertClass} alert-dismissible fade show`;
            alertDiv.role = "alert";
            alertDiv.innerHTML = `${message}`; // Removed close button

            // Clear previous messages and insert the new one
            flashContainer.innerHTML = "";
            flashContainer.appendChild(alertDiv);

            // Automatically fade out after 3 seconds
            setTimeout(() => {
                alertDiv.classList.remove("show"); // Start fade-out
                alertDiv.classList.add("fade"); // Apply Bootstrap fade effect

                // Remove alert from DOM after fade animation (0.5s)
                setTimeout(() => {
                    alertDiv.remove();
                }, 500);
            }, 3000);
        }

        mapboxgl.accessToken = "<%= mapBoxToken %>";
        
        const geocoder = new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            types: 'place',
            placeholder: 'Enter a city or place...',
            mapboxgl: mapboxgl
        });
    
        // Generates another div with .mapboxgl-ctrl-geocoder
        document.getElementById('geocoder-container').appendChild(geocoder.onAdd());
        let locationSelected = false;
        const geocoderInput = document.querySelector(".mapboxgl-ctrl-geocoder input");
        if (geocoderInput) {
            geocoderInput.value = "<%= draft ? draft.location : '' %>";
            document.getElementById('location').value = "<%= draft ? draft.location : '' %>";
            document.getElementById('geometry').value = '<%= JSON.stringify(draft ? draft.geometry.coordinates : []) %>';
            locationSelected = true;
            
        }
        
        document.addEventListener("click", function (event) {
            if (event.target === geocoderInput) {
                geocoder.query(geocoderInput.value);
                 // Trigger Mapbox search
            }
        }, { once: true }); // Event fires only once

         // Track if a dropdown option was clicked

        geocoderInput.addEventListener("input", function () {
            locationSelected = false;
        }); // Manual input detection

        geocoder.on('result', function(e) {
            document.getElementById('location').value = e.result.place_name;
            document.getElementById('geometry').value = JSON.stringify(e.result.geometry.coordinates);
            locationSelected = true;
        });

        async function saveDraft() {
            
            if (document.querySelector(".mapboxgl-ctrl-geocoder input").value.trim() === "") {
                console.log("â ï¸ Empty location allowed. Setting location and geometry to blank.");
                document.getElementById("location").value = "";
                document.getElementById("geometry").value = "[]";
            } 
            else if (!locationSelected) {
                updateFlashMessage("Please select a valid location from the dropdown before saving.", "error")
                return; // Stop saving if no selection was made
            }
            const formData = new FormData();
    
            const draftIdInput = document.querySelector('input[name="draftId"]');
            let draftId = draftIdInput ? draftIdInput.value.trim() : "";
            if (draftId) formData.append("draftId", draftId);
            
            formData.append("project[originalTitle]", document.getElementById("originalTitle").value);
            formData.append("project[originalDescription]", document.getElementById("originalDescription").value);
            formData.append("project[location]", document.getElementById("location").value);
            formData.append("project[geometry]", document.getElementById('geometry').value);
            formData.append("project[fundingGoal]", document.getElementById("fundingGoal").value);
            formData.append("project[currency]", document.getElementById("currency").value);
            formData.append("project[deadline]", document.getElementById("deadline").value);
            formData.append("project[isDraft]", true);
    
            const imageInput = document.getElementById("image");
            if (imageInput && imageInput.files.length > 0) {
                for (let i = 0; i < imageInput.files.length; i++) {
                    formData.append("image", imageInput.files[i]);
                }
            }
    
            const deleteImages = document.querySelectorAll(
                'input[name="deleteImages[]"]:checked'
            );
            deleteImages.forEach((checkbox) => {
                formData.append("deleteImages[]", checkbox.value);
            });
    
            try {
                const response = await fetch("/projects/save-draft", {
                    method: "POST",
                    body: formData,
                });
                const data = await response.json(); // Parse JSON response
                console.log("ð Full response data:", data);
                if (data.success) {
                    updateFlashMessage(data.message, "success"); // â Update flash message dynamically
                    draftIdInput.value = data.draftId;        
                } else {
                    updateFlashMessage(data.message, "error");
                }
                
            } catch (error) {
                console.error("Error saving draft:", error);
                alert("Failed to save draft.");
            }
        }
    
        function renderCategories() {
            const container = document.getElementById("categories-container");
            container.innerHTML = ""; // Clear existing content
    
            Object.entries(categories).forEach(([category, keywords]) => {
                const categoryCard = document.createElement("div");
                categoryCard.className = "card mb-3 shadow-sm";
    
                const categoryHeader = `
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">${category}</h5>
                    </div>
                `;
    
                const keywordBody = document.createElement("div");
                keywordBody.className = "card-body";
                const keywordList = document.createElement("div");
                keywordList.className = "row";
    
                keywords.forEach((keyword) => {
                    const keywordItem = document.createElement("div");
                    keywordItem.className = "col-md-6 col-lg-4 mb-2";
                    keywordItem.innerHTML = `
                        <div class="form-check">
                            <input 
                                type="checkbox" 
                                class="form-check-input" 
                                id="${keyword}" 
                                name="project[keywords][]" 
                                value="${keyword}" 
                                onchange="handleKeywordSelection(event)" 
                            />
                            <label class="form-check-label" for="${keyword}">
                                ${keyword}
                            </label>
                        </div>
                    `;
                    keywordList.appendChild(keywordItem);
                });
    
                keywordBody.appendChild(keywordList);
    
                categoryCard.innerHTML = categoryHeader;
                categoryCard.appendChild(keywordBody);
    
                container.appendChild(categoryCard);
            });
        }
    
        function handleKeywordSelection(event) {
            const keyword = event.target.value;
            if (event.target.checked) {
                if (selectedKeywords.size < maxKeywords) {
                    selectedKeywords.add(keyword); // Add the keyword
                } else {
                    event.target.checked = false; // Prevent selecting more than max allowed
                    alert(`You can only select up to ${maxKeywords} keywords.`);
                }
            } else {
                selectedKeywords.delete(keyword); // Remove the keyword
            }
    
            // Update the counter display
            document.getElementById("selected-count").textContent =
                selectedKeywords.size;
        }
    
        // Initialize the categories rendering on page load
        document.addEventListener("DOMContentLoaded", renderCategories);
    
        // Attach functions to global window object
        window.nextStep = nextStep;
        window.previousStep = previousStep;
        window.handleKeywordSelection = handleKeywordSelection;
        window.saveDraft = saveDraft;
    </script>
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js"></script>
    <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css" type="text/css">    
    <script>
        
    </script>